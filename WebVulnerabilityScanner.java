import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.*;

public class WebVulnerabilityScanner {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Ask for target
        System.out.print("Enter target URL (e.g., http://example.com or http://localhost:8080): ");
        String target = scanner.nextLine();

        if (!target.startsWith("http")) {
            target = "http://" + target;
        }

        System.out.println("\nüîé Starting Vulnerability Scan on: " + target);

        checkExposedFiles(target);
        checkHttpHeaders(target);
        checkHttpMethods(target);

        System.out.println("\n‚úÖ Scan completed.");
        scanner.close();
    }

    // 1. Check for exposed sensitive files and folders
    public static void checkExposedFiles(String target) {
        String[] commonFiles = {
                "robots.txt", ".env", "config.php", ".git/", "admin/", "backup/", "wp-config.php"
        };

        System.out.println("\nüìÅ Checking for Exposed Files and Directories...");

        for (String path : commonFiles) {
            try {
                URL url = new URL(target + "/" + path);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setRequestMethod("GET");
                conn.setConnectTimeout(3000);
                conn.setReadTimeout(3000);

                int code = conn.getResponseCode();

                switch (code) {
                    case 200:
                        System.out.println("‚ö†Ô∏è " + url + " is accessible (Status 200 - OK).");
                        System.out.println("   ‚û§ This may expose sensitive data like config files or admin panels.");
                        break;
                    case 403:
                        System.out.println("üîí " + url + " is blocked (Status 403 - Forbidden).");
                        System.out.println("   ‚û§ File exists but is protected. May still be reachable through other means.");
                        break;
                    case 401:
                        System.out.println("üîê " + url + " requires authentication (Status 401 - Unauthorized).");
                        System.out.println("   ‚û§ Indicates restricted content. Could still be brute-forced or bypassed.");
                        break;
                    case 404:
                        // Optional: Show only if user wants to see missing paths
                        // System.out.println("‚ùå Not Found: " + url);
                        break;
                    case 500:
                        System.out.println("üí• " + url + " triggered a server error (Status 500).");
                        System.out.println("   ‚û§ This could mean there's a misconfigured script or exploitable backend logic.");
                        break;
                    default:
                        System.out.println("‚ÑπÔ∏è " + url + " responded with Status: " + code);
                        break;
                }

                conn.disconnect();
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è Error accessing " + path + ": " + e.getMessage());
            }
        }
    }


    // 2. Check for leaky or missing HTTP headers
    public static void checkHttpHeaders(String target) {
        System.out.println("\nüß† Checking HTTP Headers for security issues...");

        try {
            URL url = new URL(target);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setConnectTimeout(3000);
            conn.setReadTimeout(3000);
            conn.connect();

            Map<String, List<String>> headers = conn.getHeaderFields();

            for (Map.Entry<String, List<String>> entry : headers.entrySet()) {
                String header = entry.getKey();
                List<String> values = entry.getValue();

                if (header != null && !values.isEmpty()) {
                    String value = String.join(",", values);

                    if (header.equalsIgnoreCase("Server") || header.equalsIgnoreCase("X-Powered-By")) {
                        System.out.println("‚ö†Ô∏è Leaky Header Found: " + header + ": " + value);
                        System.out.println("   ‚û§ Why this matters: Reveals server tech that attackers can exploit.");
                    } else if (header.equalsIgnoreCase("Access-Control-Allow-Origin") && value.equals("*")) {
                        System.out.println("‚ö†Ô∏è Open CORS policy: Access-Control-Allow-Origin: *");
                        System.out.println("   ‚û§ Why this matters: Can be exploited for cross-site attacks.");
                    }
                }
            }

            conn.disconnect();
        } catch (Exception e) {
            System.out.println("Error checking headers: " + e.getMessage());
        }
    }

    // 3. Check allowed HTTP methods
    public static void checkHttpMethods(String target) {
        System.out.println("\nüîé Checking Allowed HTTP Methods...");

        try {
            URL url = new URL(target);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("OPTIONS"); // Ask what methods are allowed
            conn.setConnectTimeout(3000);
            conn.setReadTimeout(3000);
            conn.connect();

            String methods = conn.getHeaderField("Allow");

            if (methods != null) {
                System.out.println("‚úÖ Allowed Methods: " + methods);

                String[] riskyMethods = {"PUT", "DELETE", "TRACE", "CONNECT"};
                for (String method : riskyMethods) {
                    if (methods.toUpperCase().contains(method)) {
                        System.out.println("‚ö†Ô∏è Risky Method Enabled: " + method);
                        System.out.println("   ‚û§ Why this matters: Could allow attackers to modify or delete server files.");
                    }
                }
            } else {
                System.out.println("‚ö†Ô∏è Couldn‚Äôt detect 'Allow' header. Server may not support OPTIONS.");
            }

            conn.disconnect();
        } catch (Exception e) {
            System.out.println("Error checking HTTP methods: " + e.getMessage());
        }
    }
}
